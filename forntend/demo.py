import time
import uuid

import matplotlib.pyplot as plt
import pandas as pd
import requests
import seaborn as sns
import streamlit as st
import os 
from evaluate import upload_data, predict, accuracy_score, train_test_split, classification_report, confusion_matrix


API_URL = os.getenv("API_URL", "http://localhost:8190") 
USERNAME = os.getenv("USERNAME", "admin") 
PASSWORD = os.getenv("PASSWORD", "secret")

# –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
DEFAULT_EXAMPLES = [
    {
        "id": "INC0027099",
        "description": "–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ 1–° –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø–∫ –∫–æ–º–µ–Ω–¥–∞–Ω—Ç–∞.",
        "subject": "–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è 1–° –∫–ª–∏–µ–Ω—Ç–∞. –°–∞–¥–æ–≤–Ω–∏–∫–∏ –¥.4 –∫.2",
        "class": "–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
        "task": "1–° –∫–ª–∏–µ–Ω—Ç",
    }
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ –±—É–¥—É—â–µ–º
]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
def get_token():
    try:
        response = requests.post(
            f"{API_URL}/token",
            data={
                "username": USERNAME,
                "password": PASSWORD,
                "scope": "predict upload search",
            },
            headers={"Content-Type": "application/x-www-form-urlencoded"},
        )

        if response.status_code != 200:
            st.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.text}")
            return None

        return response.json()["access_token"]
    except requests.exceptions.ConnectionError:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –ø–æ –∞–¥—Ä–µ—Å—É {API_URL}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
def classify_request(subject, description, token):
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    item_id = str(uuid.uuid4())

    payload = {
        "id": item_id,  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ!
        "subject": subject if subject else "no_subject",
        "description": description if description else "no_description",
    }

    try:
        response = requests.post(f"{API_URL}/predict", json=payload, headers=headers)
        response.raise_for_status()

        result = response.json()
        return result
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û
def search_similar(subject, description, token, limit=10):
    """
    –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    """
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–≤—É–º—è –ø–æ–ª—è–º–∏ - subject –∏ description
    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º id, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è API
    payload = {
        "id": str(uuid.uuid4()),
        "subject": subject if subject else "no_subject",
        "description": description if description else "no_description",
        "limit": limit,
    }

    try:
        response = requests.post(f"{API_URL}/search", json=payload, headers=headers)
        response.raise_for_status()

        result = response.json()
        return result
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        if hasattr(e, "response") and e.response is not None:
            st.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
        return None


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded",
)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ API
with st.sidebar:
    st.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
    api_url = st.text_input("URL API", value=API_URL)
    username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value=USERNAME)
    password = st.text_input("–ü–∞—Ä–æ–ª—å", value=PASSWORD, type="password")

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        API_URL = api_url
        USERNAME = username
        PASSWORD = password
        st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3 = st.tabs(["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "–ü–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"])

# –í–∫–ª–∞–¥–∫–∞ 1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
with tab1:
    st.title("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")

    # –í—ã–±–æ—Ä –ø—Ä–∏–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
    st.subheader("–í—ã–±–æ—Ä –∑–∞–ø—Ä–æ—Å–∞")

    use_default = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å")

    if use_default:
        example_index = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:",
            options=range(len(DEFAULT_EXAMPLES)),
            format_func=lambda i: f"{DEFAULT_EXAMPLES[i]['id']} - {DEFAULT_EXAMPLES[i]['subject']}",
        )

        selected_example = DEFAULT_EXAMPLES[example_index]

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        st.info(f"""
        **ID:** {selected_example["id"]}
        **–¢–µ–º–∞:** {selected_example["subject"]}
        **–û–ø–∏—Å–∞–Ω–∏–µ:** {selected_example["description"]}
        **–ö–ª–∞—Å—Å:** {selected_example["class"]}
        **–ó–∞–¥–∞—á–∞:** {selected_example["task"]}
        """)

        # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        default_subject = selected_example["subject"]
        default_description = selected_example["description"]
    else:
        default_subject = ""
        default_description = ""

    # –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("–î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    subject = st.text_input("–¢–µ–º–∞ (subject):", value=default_subject)
    description = st.text_area(
        "–û–ø–∏—Å–∞–Ω–∏–µ (description):", value=default_description, height=200
    )

    if st.button("–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å"):
        if not subject and not description:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ")
        else:
            with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞..."):
                token = get_token()

            if token:
                with st.spinner("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞..."):
                    result = classify_request(subject, description, token)

                if result and "predictions" in result:
                    st.success("–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
                    predictions_df = pd.DataFrame(result["predictions"])
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
                    st.dataframe(predictions_df, width=800)

                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
                    fig, ax = plt.subplots(figsize=(10, 5))
                    sns.barplot(
                        x="class_name",
                        y="probability",
                        data=predictions_df.head(5),
                        ax=ax,
                    )
                    ax.set_xlabel("–ö–ª–∞—Å—Å")
                    ax.set_ylabel("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
                    ax.set_title("–¢–æ–ø-5 –∫–ª–∞—Å—Å–æ–≤ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
                    plt.xticks(rotation=45, ha="right")
                    plt.tight_layout()
                    st.pyplot(fig)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å
                    st.subheader(
                        f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {result['predictions'][0]['class_name']}"
                    )
                    st.subheader(
                        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {result['predictions'][0]['probability']:.2f}"
                    )

                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")

# –í–∫–ª–∞–¥–∫–∞ 2: –ü–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã - –ò–°–ü–†–ê–í–õ–ï–ù–û
with tab2:
    st.title("–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

    # –í—ã–±–æ—Ä –ø—Ä–∏–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    use_default_search = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")

    if use_default_search:
        example_index_search = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            options=range(len(DEFAULT_EXAMPLES)),
            format_func=lambda i: f"{DEFAULT_EXAMPLES[i]['id']} - {DEFAULT_EXAMPLES[i]['subject']}",
            key="search_example",
        )

        selected_example_search = DEFAULT_EXAMPLES[example_index_search]
        default_search_subject = selected_example_search["subject"]
        default_search_description = selected_example_search["description"]
    else:
        default_search_subject = ""
        default_search_description = ""

    # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–æ–¥ –Ω–∞ subject –∏ description
    st.subheader("–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞")
    search_subject = st.text_input("–¢–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞:", value=default_search_subject)
    search_description = st.text_area(
        "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:", value=default_search_description, height=150
    )

    limit = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", min_value=1, max_value=20, value=10)

    if st.button("–ò—Å–∫–∞—Ç—å"):
        if not search_subject and not search_description:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        else:
            with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞..."):
                token = get_token()

            if token:
                with st.spinner("–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."):
                    search_results = search_similar(
                        search_subject, search_description, token, limit
                    )

                if search_results and "results" in search_results:
                    st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(search_results['results'])} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

                    for i, result in enumerate(search_results["results"]):
                        with st.expander(
                            f"{i + 1}. {result['subject']} (–ö–ª–∞—Å—Å: {result['class_name']}, –û—Ü–µ–Ω–∫–∞: {result['score']:.4f})"
                        ):
                            st.write(f"**ID –∑–∞–ø—Ä–æ—Å–∞:** {result['request_id']}")
                            st.write(f"**–¢–µ–º–∞:** {result['subject']}")
                            st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {result['description']}")
                            st.write(f"**–ö–ª–∞—Å—Å:** {result['class_name']}")
                            if "task" in result:
                                st.write(f"**–ó–∞–¥–∞—á–∞:** {result['task']}")
                            st.write(f"**–û—Ü–µ–Ω–∫–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞:** {result['score']:.4f}")

                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω–æ–∫ —Å—Ö–æ–¥—Å—Ç–≤–∞
                    if search_results["results"]:
                        scores = [
                            result["score"] for result in search_results["results"]
                        ]
                        titles = [
                            f"{i + 1}. {result['subject'][:30]}..."
                            for i, result in enumerate(search_results["results"])
                        ]

                        fig, ax = plt.subplots(figsize=(10, 6))
                        bars = ax.barh(range(len(scores)), scores, align="center")
                        ax.set_yticks(range(len(scores)))
                        ax.set_yticklabels(titles)
                        ax.set_xlabel("–û—Ü–µ–Ω–∫–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞")
                        ax.set_title("–¢–æ–ø –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É")

                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å—Ç–æ–ª–±—Ü–∞–º
                        for i, v in enumerate(scores):
                            ax.text(v + 0.01, i, f"{v:.4f}", va="center")

                        plt.tight_layout()
                        st.pyplot(fig)

                else:
                    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

# –í–∫–ª–∞–¥–∫–∞ 3: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ü–µ–Ω–∫–∞
with tab3:
    st.title("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞")
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ subject, description –∏ class", type="csv"
    )
    if uploaded_file:
        df = pd.read_csv(uploaded_file)
        st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df.head())

        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏"):
            token = get_token()
            if token:
                with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—É..."):
                    upload_data(df, token)
                st.success("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
                train_df, test_df = train_test_split(
                    df, test_size=0.2, random_state=42, stratify=df["class"]
                )

                with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏..."):
                    preds = predict(test_df, token)

                # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                y_true = test_df["class"].tolist()
                y_pred = preds
                acc = accuracy_score(y_true, y_pred)
                report_text = classification_report(y_true, y_pred)
                cm = confusion_matrix(y_true, y_pred)

                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏")
                st.write(f"Accuracy: {acc:.4f}")
                st.text(report_text)

                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã –æ—à–∏–±–æ–∫
                fig, ax = plt.subplots(figsize=(6, 6))
                sns.heatmap(cm, annot=True, fmt="d", ax=ax)
                ax.set_xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ")
                ax.set_ylabel("–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å")
                st.pyplot(fig)

                # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–∞–Ω–Ω—ã—Ö
                csv_data = df.to_csv(index=False).encode("utf-8")
                st.download_button(
                    "–°–∫–∞—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é",
                    csv_data,
                    "uploaded_data.csv",
                    "text/csv",
                )
    else:
        st.info("CSV-—Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
